import tkinter as tk
from tkinter import messagebox
import subprocess
import platform
import ipaddress

def open_ping_window():
    def ping_advanced(target, packets, timeout, packet_size, ttl):
        if not target:
            messagebox.showerror("Error", "Target is empty")
            return

        # Prepare the ping command
        ping_command = ['ping']
        if platform.system().lower() == 'windows':
            ping_command.extend(['-n', packets, '-w', timeout])
        else:
            ping_command.extend(['-c', packets, '-W', timeout])
        
        if packet_size:
            ping_command.extend(['-s', packet_size])
        
        if ttl:
            ping_command.extend(['-t', ttl])

        ping_command.append(target)

        try:
            output = subprocess.run(ping_command, capture_output=True, text=True, timeout=int(timeout) + 1)
            # Display ping results in a new window
            results_window = tk.Toplevel(root)
            results_window.title("Ping Results")
            results_label = tk.Label(results_window, text="Ping Results")
            results_label.pack()
            results_text = tk.Text(results_window)
            results_text.insert(tk.END, output.stdout)
            results_text.pack()
        except subprocess.TimeoutExpired:
            messagebox.showerror("Error", "Ping operation timed out")

    ping_window = tk.Toplevel(root)
    ping_window.title("Ping")

    # Target
    label_target = tk.Label(ping_window, text="Target:")
    label_target.grid(row=0, column=0, sticky="e")
    entry_target = tk.Entry(ping_window)
    entry_target.grid(row=0, column=1)

    # Number of Packets
    label_packets = tk.Label(ping_window, text="Number of Packets:")
    label_packets.grid(row=1, column=0, sticky="e")
    entry_packets = tk.Entry(ping_window)
    entry_packets.grid(row=1, column=1)
    entry_packets.insert(tk.END, "4")  # Default value

    # Timeout
    label_timeout = tk.Label(ping_window, text="Timeout (seconds):")
    label_timeout.grid(row=2, column=0, sticky="e")
    entry_timeout = tk.Entry(ping_window)
    entry_timeout.grid(row=2, column=1)
    entry_timeout.insert(tk.END, "5")  # Default value
    
    # Packet Size
    label_packet_size = tk.Label(ping_window, text="Packet Size:")
    label_packet_size.grid(row=3, column=0, sticky="e")
    entry_packet_size = tk.Entry(ping_window)
    entry_packet_size.grid(row=3, column=1)
    
    # TTL
    label_ttl = tk.Label(ping_window, text="Time To Live (TTL):")
    label_ttl.grid(row=4, column=0, sticky="e")
    entry_ttl = tk.Entry(ping_window)
    entry_ttl.grid(row=4, column=1)

    # Ping Button
    button_ping_advanced = tk.Button(ping_window, text="Ping", command=lambda: ping_advanced(entry_target.get(), entry_packets.get(), entry_timeout.get(), entry_packet_size.get(), entry_ttl.get()))
    button_ping_advanced.grid(row=5, columnspan=2, pady=10)

def open_traceroute_window():
    def traceroute_advanced(target, max_hops, timeout):
        if not target:
            messagebox.showerror("Error", "Target is empty")
            return

        # Prepare the traceroute command
        traceroute_command = ['traceroute']
        if platform.system().lower() == 'windows':
            traceroute_command.extend(['-d', '-h', max_hops, '-w', timeout])
        else:
            traceroute_command.extend(['-n', '-m', max_hops, '-w', timeout])

        traceroute_command.append(target)

        try:
            output = subprocess.run(traceroute_command, capture_output=True, text=True, timeout=int(timeout) + 1)
            # Display traceroute results in a new window
            results_window = tk.Toplevel(root)
            results_window.title("Traceroute Results")
            results_label = tk.Label(results_window, text="Traceroute Results")
            results_label.pack()
            results_text = tk.Text(results_window)
            results_text.insert(tk.END, output.stdout)
            results_text.pack()
        except subprocess.TimeoutExpired:
            messagebox.showerror("Error", "Traceroute operation timed out")

    traceroute_window = tk.Toplevel(root)
    traceroute_window.title("Traceroute")

    # Target
    label_target = tk.Label(traceroute_window, text="Target:")
    label_target.grid(row=0, column=0, sticky="e")
    entry_target = tk.Entry(traceroute_window)
    entry_target.grid(row=0, column=1)

    # Max Hops
    label_max_hops = tk.Label(traceroute_window, text="Max Hops:")
    label_max_hops.grid(row=1, column=0, sticky="e")
    entry_max_hops = tk.Entry(traceroute_window)
    entry_max_hops.grid(row=1, column=1)
    entry_max_hops.insert(tk.END, "30")  # Default value

    # Timeout
    label_timeout = tk.Label(traceroute_window, text="Timeout (seconds):")
    label_timeout.grid(row=2, column=0, sticky="e")
    entry_timeout = tk.Entry(traceroute_window)
    entry_timeout.grid(row=2, column=1)
    entry_timeout.insert(tk.END, "5")  # Default value

    # Traceroute Button
    button_traceroute_advanced = tk.Button(traceroute_window, text="Traceroute", command=lambda: traceroute_advanced(entry_target.get(), entry_max_hops.get(), entry_timeout.get()))
    button_traceroute_advanced.grid(row=3, columnspan=2, pady=10)

def open_port_scan_window():
    port_scan_window = tk.Toplevel(root)
    port_scan_window.title("Port Scanner")

    label_target = tk.Label(port_scan_window, text="Target:")
    label_target.grid(row=0, column=0, sticky="e")

    entry_target = tk.Entry(port_scan_window)
    entry_target.grid(row=0, column=1)

    label_ports = tk.Label(port_scan_window, text="Ports (e.g., 1-100):")
    label_ports.grid(row=1, column=0, sticky="e")

    entry_ports = tk.Entry(port_scan_window)
    entry_ports.grid(row=1, column=1)

    button_scan = tk.Button(port_scan_window, text="Scan Ports", command=lambda: scan_ports(entry_target.get(), entry_ports.get()))
    button_scan.grid(row=2, columnspan=2, pady=10)

def open_subnet_calculator_window():
    subnet_calculator_window = tk.Toplevel(root)
    subnet_calculator_window.title("Subnet Calculator")

    label_ip = tk.Label(subnet_calculator_window, text="IP Address")
    label_ip.grid(row=0, column=0, sticky="e")

    entry_ip = tk.Entry(subnet_calculator_window)
    entry_ip.grid(row=0, column=1)

    label_subnet = tk.Label(subnet_calculator_window, text="Subnet Mask:")
    label_subnet.grid(row=1, column=0, sticky="e")

    entry_subnet = tk.Entry(subnet_calculator_window)
    entry_subnet.grid(row=1, column=1)

    button_calculate = tk.Button(subnet_calculator_window, text="Calculate", command=lambda: calculate_subnet(entry_ip.get(), entry_subnet.get()))
    button_calculate.grid(row=2, columnspan=2, pady=10)

def scan_ports(target, port_range):
    if not port_range:
        messagebox.showerror("Error", "Port range is empty")
        return

    try:
        start_port, end_port = map(int, port_range.split('-'))
    except ValueError:
        messagebox.showerror("Error", "Invalid port range format")
        return

    # Implement port scanning logic
    # ...

    # Display results in a new window
    results_window = tk.Toplevel(root)
    results_window.title("Port Scan Results")
    results_label = tk.Label(results_window, text="Port Scan Results")
    results_label.pack()
    # Display results here

def calculate_subnet(ip, subnet):
    if not ip or not subnet:
        messagebox.showerror("Error", "IP address or subnet mask is empty")
        return

    try:
        network = ipaddress.ip_network(f"{ip}/{subnet}", strict=False)
        broadcast = network.broadcast_address
        hosts = list(network.hosts())
    except ValueError:
        messagebox.showerror("Error", "Invalid IP address or subnet mask")
        return

    # Display results in a new window
    results_window = tk.Toplevel(root)
    results_window.title("Subnet Calculation Results")
    results_label = tk.Label(results_window, text="Subnet Calculation Results")
    results_label.pack()
    # Display results here

def ping(target):
    if not target:
        messagebox.showerror("Error", "Target is empty")
        return

    # Check the platform to determine the ping command options
    if platform.system().lower() == 'windows':
        ping_command = ['ping', '-n', '4', target]  # Use -n option for Windows
    else:
        ping_command = ['ping', '-c', '4', target]

    try:
        output = subprocess.run(ping_command, capture_output=True, text=True, timeout=10)
        # Display ping results in a new window
        results_window = tk.Toplevel(root)
        results_window.title("Ping Results")
        results_label = tk.Label(results_window, text="Ping Results")
        results_label.pack()
        results_text = tk.Text(results_window)
        results_text.insert(tk.END, output.stdout)
        results_text.pack()
    except subprocess.TimeoutExpired:
        messagebox.showerror("Error", "Ping operation timed out")

# Create GUI
root = tk.Tk()
root.title("Networking Tools")

# Create buttons to open windows for port scanner, subnet calculator, ping, and traceroute
button_port_scan = tk.Button(root, text="Port Scanner", command=open_port_scan_window)
button_port_scan.pack(pady=10)

button_subnet_calc = tk.Button(root, text="Subnet Calculator", command=open_subnet_calculator_window)
button_subnet_calc.pack(pady=10)

button_ping = tk.Button(root, text="Ping", command=open_ping_window)
button_ping.pack(pady=10)

button_traceroute = tk.Button(root, text="Traceroute", command=open_traceroute_window)
button_traceroute.pack(pady=10)

root.mainloop()